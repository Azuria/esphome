substitutions:
  device_name: sonoff-4chpro-restarter
  friendly_name: Sonoff 4CH Pro with Restarter
  device_description: "Sonoff 4CH Pro with Restarter"
  led_status: GPIO13
  
  http_url: "http://worldtimeapi.org/api/timezone/Europe/Copenhagen" # Url to check if connection is up
  http_get_failed: "3" # How many times to allow the get url to fail
  http_get_mins: /2 # How often to check if it is possible to get the url
  
esphome:
  name: '${device_name}'
  comment: '${device_description}'
  platform: ESP8266
  board: esp01_1m

# Enable Home Assistant API
api:
  password: !secret esphome_api_password
  
logger:
  level: DEBUG

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  
web_server:
  port: 80
  auth:
    username: !secret esphome_web_username
    password: !secret esphome_web_password

wifi:
  ssid: !secret iot_ssid
  password: !secret iot_pass

  ap:
    ssid: '${device_name}'
    password: !secret fallback_password

# Status LED for connection
status_led:
  pin:
    number: ${led_status}
    inverted: false
    
    
globals:
  - id: http_failed
    type: int
    restore_value: no
    initial_value: '0'
    
http_request:
  useragent: esphome/device
  timeout: 2s
  esp8266_disable_ssl_support: true
  
time:
  - platform: sntp
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: ${http_get_mins}
        then:
          - http_request.get:
              url: ${http_url}
              headers:
                Content-Type: application/json
              verify_ssl: false
              on_response:
                then:
                  lambda: !lambda |-
                      if (status_code == 200) {
                        id(http_failed) = 0;
                      }
                      else
                      {
                        id(http_failed)++;
                      }
                      if (id(http_failed) >= int(${http_get_failed}))
                      {
                        id(http_failed) = 0;
                        id(relay1).turn_on();
                      }
                      id(total_http_failed).publish_state(id(http_failed));

sensor:
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Signal"
    
  - platform: template
    name: "${friendly_name} - Total HTTP failed"
    id: total_http_failed
    state_class: total_increasing
    icon: mdi:lan-disconnect
    accuracy_decimals: 0
    lambda: return id(http_failed);

# Sensors for ESP version and WIFI information
text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} - ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} - IP Address"
      icon: mdi:wifi
    ssid:
      name: "${friendly_name} - Connected SSID"
      icon: mdi:wifi-strength-2
      
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} - Button 1"
    on_press:
      - switch.toggle: relay1
  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} - Button 2"
    on_press:
      - switch.toggle: relay2
  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} - Button 3"
    on_press:
      - switch.toggle: relay3
  - platform: gpio
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} - Button 4"
    on_press:
      - switch.toggle: relay4
    
switch:
  - platform: gpio
    name: "${friendly_name} - Relay 1"
    pin: GPIO12
    id: relay1
    on_turn_on:
    - delay: 5s
    - switch.turn_off: relay1
  - platform: gpio
    name: "${friendly_name} - Relay 2"
    pin: GPIO5
    id: relay2
  - platform: gpio
    name: "${friendly_name} - Relay 3"
    pin: GPIO4
    id: relay3
  - platform: gpio
    name: "${friendly_name} - Relay 4"
    pin: GPIO15
    id: relay4
